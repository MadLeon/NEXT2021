//------------------------------------------------------------------------
//types.h
//------------------------------------------------------------------------
#ifndef TYPES_H
#define TYPES_H
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Store small data types
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// 3 times 3 matrix
//------------------------------------------------------------------------
struct Matrix3x3
{
	float value[3][3];

	Matrix3x3();

	//------------------------------------------------------------------------
	// [] operator overload function
	//------------------------------------------------------------------------
	float* const operator[](int i) { return value[i]; }

	//------------------------------------------------------------------------
	// Set the current matrix to identity matrix
	// +- 1, 0, 0 -+
	// |  0, 1, 0  |
	// +- 0, 0, 1 -+
	//------------------------------------------------------------------------
	void SetIdentity();
};

//------------------------------------------------------------------------
// 2D vector
//------------------------------------------------------------------------
struct Vec2
{
	float x;
	float y;

	Vec2(float x_ = 0.0f, float y_ = 0.0f) : x(x_), y(y_) {}

	//------------------------------------------------------------------------
	// Prescribe the mathematical operation of a vector
	//------------------------------------------------------------------------
	Vec2 operator+(Vec2);
	Vec2 operator+=(Vec2);
	Vec2 operator-(Vec2);
	Vec2 operator-=(Vec2);
	Vec2 operator*(Matrix3x3 m);
	Vec2 operator*=(Matrix3x3 m);
	Vec2 operator==(Vec2);
};

//------------------------------------------------------------------------
// Index of two-dimensional array
//------------------------------------------------------------------------
struct Index
{
	size_t row;
	size_t column;
};

//------------------------------------------------------------------------
// Types of tower bullets
//------------------------------------------------------------------------
enum class TowerType
{
	BULLET,
	LASER
};

//------------------------------------------------------------------------
// The direction the enemy is moving
//------------------------------------------------------------------------
enum class Direction
{
	UP,
	RIGHT,
	DOWN,
	LEFT,
};

#endif // !_TYPES_H