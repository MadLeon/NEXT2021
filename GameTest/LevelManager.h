//------------------------------------------------------------------------
//LevelManager.h
//------------------------------------------------------------------------
#ifndef LEVELMANAGER_H
#define LEVELMANAGER_H
//------------------------------------------------------------------------
#include "App/AppSettings.h"
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Responsible for recording and managing level information
//------------------------------------------------------------------------
class LevelManager
{
	// current map level
	size_t m_level;

	// tell if the level is increased
	bool m_levelChange;

	// tell if the game is cleared
	bool m_clear;

	//------------------------------------------------------------------------
	// The map style of the first level
	//------------------------------------------------------------------------
	size_t m_pattern1[NUM_TILES][NUM_TILES] = 
	{ 
		{0,0,0,0,0,0,0,0,0,0},
		{1,1,0,0,0,0,0,0,0,0},
		{0,1,0,0,1,1,1,1,0,0},
		{0,1,0,0,1,0,0,1,0,0},
		{0,1,0,0,1,0,0,1,0,0},
		{0,1,0,0,1,0,0,1,0,0},
		{0,1,0,0,1,0,0,1,0,0},
		{0,1,0,0,1,0,0,1,0,0},
		{0,1,1,1,1,0,0,1,1,1},
		{0,0,0,0,0,0,0,0,0,0}
	};

	//------------------------------------------------------------------------
	// The map style of the second level
	//------------------------------------------------------------------------
	size_t m_pattern2[NUM_TILES][NUM_TILES] =
	{
		{0,0,0,0,0,0,0,0,0,0},
		{1,1,0,0,1,1,1,1,1,0},
		{0,1,0,0,1,0,0,0,1,0},
		{0,1,0,0,1,0,0,0,1,0},
		{0,1,1,1,1,0,0,0,1,0},
		{0,0,0,0,0,0,0,0,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,0,0,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0}
	};

	//------------------------------------------------------------------------
	// The map style of the third level
	//------------------------------------------------------------------------
	size_t m_pattern3[NUM_TILES][NUM_TILES] =
	{
		{0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,0,0,0,0,0,0,0,0},
		{0,1,0,1,1,1,0,0,0,0},
		{0,1,0,1,0,1,1,1,1,0},
		{0,1,0,1,0,0,0,0,1,0},
		{0,1,1,1,0,0,0,0,1,1},
		{0,0,0,0,0,0,0,0,0,0}
	};

public:
	LevelManager() : m_level(1), m_levelChange(false), m_clear(false) {}

	//------------------------------------------------------------------------
	// Return current map level
	//------------------------------------------------------------------------
	size_t GetLevel() { return m_level; }

	//------------------------------------------------------------------------
	// Return next level 1 -> 2 -> 3 -> 1 -> ...
	//------------------------------------------------------------------------
	void NextLevel() { m_level == NUM_LEVELS ? m_level = 1 : m_level++; }

	//------------------------------------------------------------------------
	// Set current level to 1
	//------------------------------------------------------------------------
	void ResetLevel() { m_level = 1; }

	//------------------------------------------------------------------------
	// Determine whether the map level should be changed
	//------------------------------------------------------------------------
	bool GetLevelChange() { return m_levelChange; }
	void LevelChangeOn() { m_levelChange = true; }
	void LevelChangeOff() { m_levelChange = false; }

	//------------------------------------------------------------------------
	// Determine whether the player has cleared all the levels
	//------------------------------------------------------------------------
	bool GetClear() { return m_clear; }
	void SetClearOn() { m_clear = true; }
	void SetClearOff() { m_clear = false; }

	//------------------------------------------------------------------------
	// Draw a map according to the current map level
	//------------------------------------------------------------------------
	void DrawMap();
	void DrawLevelOne();
	void DrawLevelTwo();
	void DrawLevelThree();

	//------------------------------------------------------------------------
	// Convert the two-dimensional array map information into an image
	//------------------------------------------------------------------------
	void VisualizePattern(size_t [NUM_TILES][NUM_TILES]);

	//------------------------------------------------------------------------
	// Check the value of the parameter index in the two-dimensional array
	//------------------------------------------------------------------------
	size_t CheckPattern(Index);
};

#endif // !LEVEL_H
